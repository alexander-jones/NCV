#pragma once
#include <slug/spec/Components.h>
#include <vector>

namespace slug
{

namespace spec
{

/**
	Base class for objects that can extract data from a list of elements and
	write the serialized data out.
*/
class Extractor
{
public:
	/**
		Writes the data (including header) for all parameters this object
		is responsible for.

		@param el List of Elements to analyze. The type should be known, so
			casting should be safe.
		@param os The binary output stream to write to
		@return true if writing was successful; false otherwise
	*/
	virtual bool serialize(ElementList& el, std::ostream& os) = 0;

	bool serialize(ElementList& el, util::OutputStream& os)
	{
		std::ostream& o = os;
		return serialize(el, o);
	}

	/**
		Writes the binary header for a parameter. Helper function.

		@param name The name of the parameter
		@param size The number of bytes needed to store the data
		@param os The binary output stream to write to
		
		@return true if writing was successful; false otherwise
	*/
	bool writeHeader(const std::string& name, 
	                 unsigned int size, 
					 util::OutputStream& os)
	{
		std::ostream& o = os;
		return writeHeader(name, size, o);
	}

	bool writeHeader(const std::string& name,
	                 unsigned int size,
					 std::ostream& os)
	{
		unsigned int length = name.length();
		os.write((const char*)&length, sizeof(unsigned int));
		os.write(name.c_str(), length);
		os.write((const char*)&size, sizeof(unsigned int));
		return true;
	}

	/**
		Writes out a single parameter with header included. Helper function.
	*/
	template<typename T>
	bool writeSingle(const std::string& name, 
	                 const T& v, 
					 std::ostream& os);

	template<typename T>
	bool writeVector(const std::string& name,
	                 const std::vector<T>& v,
					 std::ostream& os);

	/**
		Returns the number of parameters that this extractor will generate.

		@return The number of parameters generated by the extractor.
	*/
	virtual unsigned int numParameters() const = 0;
};

///A list of extractors
typedef std::vector<Extractor*> ExtractorList;

/**
	An Extractor that pulls a single arbitrary data member from an element
	by using the functor F.

	@param T Type of the data member
	@param F Functor to return the data member as a T
*/
template<typename T, typename F>
class UniformExtractor
	: public Extractor
{
public:
	///Constructor
	UniformExtractor(const std::string& n, const F& f = F());
	
	virtual bool serialize(ElementList& el, std::ostream& os);

	virtual unsigned int numParameters() const;
private:
	///Parameter name
	std::string _name;

	///Functor to access the parameter from an Element
	F _f;
};

#include <slug/spec/Extractor.hpp>

} //namespace spec

} //namespace slug
