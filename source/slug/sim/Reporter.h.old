#pragma once
#include <set>
#include <vector>
#include <slug/sim/Manager.h>
#include <slug/sim/Factory.h>
#include <slug/util/Unique.h>
#include <slug/sim/Parameterized.h>
#include <slug/sim/BrainSimulator.h>
#include <slug/sim/SimulationProperties.h>

namespace slug
{

namespace sim
{

//Forward declarations
class BrainSimulator;
class Communicator;

/**
	Interface for objects that collect data on a running simulation and output
	the results. If that data is spread across multiple machines, a reporter is
	genereated for each machine along with a communication mechanism. One of
	these instances is deemed the master.
*/
class Reporter : public Parameterized
{
public:
	/**
		Initializes communications between all associated reporters across the
		cluster.

		@param bs The simulator the reporter is running on
		@return true if successful; false otherwise
	*/
	bool initCommunications(BrainSimulator* bs);

	/**
		The unique machine ID of the machine that contains the master instance
		of this reporter.
	*/
	util::Unique masterID;

	/**
		True if this instance is the master instance.
	*/
	bool master;

	/**
		Reads a reporter specification and generates a reporter from it.
	
		@param path The path to the file
		@return A constructed Reporter if successful; nullptr otherwise
	*/
	static Reporter* read(const std::string& path);

	/**
		Contains data about which elements on which machines should be reported
		on.
	*/
	struct MachineSpec
	{
		/**
			Contains data on which elements on which reportables should be
			reported on.
		*/
		struct ReportableSpec
		{
			///Unique ID of the reportable
			util::Unique id;

			///Indices of elements
			std::vector<unsigned int> indices;

			///The user ID of each of those elements
			std::vector<unsigned int> userIDs;
		};

		///The Unique ID of the machine
		util::Unique id;

		///The set of reportables on this machine that contain elements
		std::vector<ReportableSpec*> reportables;
	};

	/**
		Initializes the Reporter after all data has been read in.

		@param properties Simulation properties for this run
		@return true if successful; false otherwise
	*/
	virtual bool init(const SimulationProperties* properties) = 0;

	/**
		Runs the Reporter for the duration of the simulation.

		@param properties Simulation properties for this run
		@return true if successful; false otherwise
	*/
	virtual bool run(const SimulationProperties* properties) = 0;

	/**
		The element specifications for all machines in the reporter group
	*/
	std::vector<MachineSpec*> machines; 

	/**
		A pointer to the element specification for the machine this reporter is
		on
	*/
	MachineSpec* mySpec;

	/**
		A communicator object that only connects reporters in the same reporter
		group
	*/
	struct Communicator* communicator;

	/**
		Returns true if the machineID in question belongs to this reporter
		group

		@param machineID The ID of the machine in question
		@return true if the machine is involved; false otherwise
	*/
	bool involves(util::Unique machineID) const;

	/**
		Initializes internals of the reporter given the ID of the machine it
		exists on
		
		@param machineID The ID of the machine the reporter is running on
		@return true if successful; false otherwise
	*/
	bool machineInit(util::Unique machineID);
private:
};

typedef Factory<Reporter> ReporterFactory;
typedef Manager<ReporterFactory> Reporters;

} //namespace sim

} //namespace slug
